#!/usr/bin/perl -w
use 5.006;
use 5.10.0;
use strict;
use File::Find ();
use IO::File;
use Getopt::Std;
use Term::ANSIColor;

use vars qw/*name *dir *prune $opt_w $opt_i $opt_V/;
*name  = *File::Find::name;
*dir   = *File::Find::dir;
*prune = *File::Find::prune;

sub wanted;
sub fileglob_to_re ($);
sub domatch( $;$ );
sub usage;

getopts('wiV');
my $regex = /[\u4e00-\u9fa5]+/;
my $ffilter = shift;
if ( defined($ffilter) && $ffilter ) {
    $ffilter = fileglob_to_re($ffilter);
    print "file name search pattern is : $ffilter\n" if $opt_V;
}

# Traverse desired filesystems
File::Find::find( { wanted => \&wanted }, './' );
exit;

sub wanted {
    return if -d $File::Find::name;
    if ( defined($ffilter) && $ffilter ) {
        return unless /$ffilter/si;
    }

    #skip binary file
    my @ignorelist = qw( .gif .jpg .bmp .png .swf .ico .exe .dll
      .exe .ttf .dat .attach .rar.zip .gz .z .wav .mp3 .db .pack
      .mo .o .lib .so
    );
    for my $ext (@ignorelist) {
        if (/^.*\$ext\z/si) {
            print "skip binary file $_\n" if $opt_V;
            return;
        }
    }
    my $fh = IO::File->new($_);
    return unless -f $fh;
    if ( -B $fh ) {
        print "skip binary file $_\n" if $opt_V;
        return;
    }
    domatch $fh, $File::Find::name;
}

sub fileglob_to_re ($) {
    my $x = shift;
    $x =~ s#([./^\$()+])#\\$1#g;
    $x =~ s#([?*])#.$1#g;
    "^$x\\z";
}

sub domatch( $;$ ) {
    my $fh   = shift;
    my $name = shift;

    warn "$name is a directory\n" and return if -d $name;

    while (<$fh>) {
        if (/$regex/) {
            print color('bold blue'), "$name", color('reset'), ":";
            print color('yellow'),    "$.",    color('reset'), ":";
            print $`, color('bold red'), $&, color('reset'), $';
        }
    }
}

sub usage() {
    say "grep in directory recursion mode.";
    say "Usage : rgrep [-wiV] regex [filetype].";
    say "-w search at word boundary.";
    say "-i case insensitive search.";
    say "-V verbose mode.";
    exit;
}
