" Vimrc file settings ---------------------- {{{

"set nobackup
set nocompatible "不兼容vi,可增强性能
set helplang=cn
set fileencodings=ucs-bom,chinese,taiwan,japan,korea,utf-8,latin1
set showmatch
set formatoptions+=mM "正确处理中文字符的折行和拼接
syntax on

set autoindent        "always set autoindenting on
set smartindent       "set smart indent
set smarttab          "use tabs at the start of a line, spaces elsewhere
set tabstop=4
set shiftwidth=4
set softtabstop=4 "敲入tab键时实际占有的列数。softtabstop大于tabstop时多出的部分会用空格填充,小于的时候会变成softtabstop个空格
set expandtab
"set noexpandtab

set noshowmode

"colo metacosm
colo desert
"colo github
"colo blackdust

""""""""""""""""""""""""""""""
" Statusline
"   """"""""""""""""""""""""""""""
"Always hide the statusline
set laststatus=2

"Format the statusline
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c

set diffexpr=MyDiff()

"set encoding=utf8
"set encoding=gbk
"set encoding=gb2312
"set encoding=cp936
set termencoding=utf-8
set encoding=utf-8
set fileencodings=utf-8,gbk,ucs-bom,cp936
set fileencoding=utf-8
set history=7000
set undofile
set undolevels=10000 "maximum number of changes that can be undone
"set nohlsearch
set mouse=
set hlsearch
set ignorecase

set undodir=~/.vim/undo
set backupdir=~/.vim/backup
set directory=~/.vim/swap

" }}}
" Vimrc keymaps ----------------------- {{{

"nnoremap <F2> :set encoding=utf8 <CR>
"nnoremap <F3> :set encoding=cp936 <CR>
"nmap <F5> ^i/* <Esc> $a*/<Esc> "把行变成传统c格式的注释
"nmap <F6> ^xxx <Esc> $hxx <Esc> "取消传统格式的c格式注释
"自动格式化json文本
map <F2> <Esc>:%!python -m json.tool<CR>:set filetype=json<CR>
"删除行首的空白
nmap <F9> :s/^\s\+//<CR>

"F10删除行尾空白
noremap <F10> :call TrimWhitespace()<CR>

" }}}
" Vimrc functions ----------------------- {{{
function! CurDir()
    let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction

function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction


function! SetFileEncodings(encodings)
     let b:my_fileencodings_bak=&fileencodings
     let &fileencodings=a:encodings
endfunction

"删除行尾的空白
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

"确保备份交换和undo目录存在
function! EnsureDirExists (dir)
   if !isdirectory(a:dir)
     if exists("*mkdir")
       call mkdir(a:dir,'p')
       echo "Created directory: " . a:dir
     else
       echo "Please create directory: " . a:dir
     endif
   endif
endfunction

" }}}
" Vimrc misc ----------------------- {{{

source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
"behave mswin

command -nargs=* Help tabnew | help <args> | resize 999

"保存时自动删除行尾空白
autocmd BufWritePre *.php :call TrimWhitespace()

"把后缀.nfo的文件当作CP437编码
au BufReadPre  *.nfo              call SetFileEncodings('cp437')

call EnsureDirExists($HOME . '/.vim/backup')
call EnsureDirExists($HOME . '/.vim/swap')
call EnsureDirExists($HOME . '/.vim/undo')

" }}}
