#!/usr/bin/env ruby
# frozen_string_literal: true

require 'awesome_print'
require 'benchmark'
require 'colorize'
require 'date'
require 'json'
require 'mysql2'
require 'pry'
require 'text-table'

class Mysql2::Client
  attr_reader :res, :course, :exec_time, :total

  @changed

  def ff(sql)
    @res = query(sql)
    ap transform_h(0, 1)
  end

  def l(n = 4)
    sql = 'show tables'
    res = query(sql, as: :array)

    tbl = []
    res.each_slice(n) do |row|
      tbl.push row.map { |a| a[0] }
    end

    if tbl.any?
      if tbl.last.length < 4
        tbl.last.fill("",  tbl.last.length..3)
      end

      puts tbl.to_table
    end

    nil
  end

  def d(table)
    sql = "desc #{table}"

    res = query(sql, as: :array)

    fields = res.fields
    res_a = res.to_a
    res_a.unshift(fields)

    puts res_a.to_table(first_row_is_head: true)
  end

  def q(sql, take = 10)
    @changed = sql[/^insert|update|delete/i] ? true : false

    res = nil
    @exec_time = Benchmark.measure{
      @res = query(sql)
      @coursor = 0
    }
    @total = @res ? @res.count : nil

    if @total && take > total
      take = total
    end

    output(take)
    nil
  end

  def m(take = 10)
    return if @res.nil?
    return if @coursor >= @total

    output(take)
  end

  def output(take)
    ap transform_h(take, @coursor).to_a if @total

    if @total
      output = "#{total}".colorize(color: :cyan, mode: :bold) \
              + " row(s) total, from ".colorize(:green) \
              + "#{@coursor}".colorize(color: :blue, mode: :bold) \
              + " show ".colorize(:green) \
              + "#{take}".colorize(color: :blue, mode: :bold) \
              + " row(s) ".colorize(:green) \
              + "(".colorize(:green) \
              + @exec_time.real.to_s.colorize(:yellow) \
              + " sec)".colorize(:green)
      puts output
      @coursor += take
    end

    if @changed
      numbers = query_info_string.scan(/\d+/)
      output = "Rows matched: ".colorize(:blue) + numbers[0].to_s.colorize(:green) \
              + "  Changed: ".colorize(:blue) + numbers[1].to_s.colorize(:yellow) \
              + "  Warnings: ".colorize(:blue) + numbers[2].to_s.colorize(:red)
      puts output
    end

    nil
  end

  def field_probe?(table, field)
    (query "show columns from `#{table}` like '#{field}'").to_a.any?
  end

  def s(table, take = 10)
    sql = "select * from `#{table}`"

    if field_probe?(table, 'created_at')
      sql += ' order by created_at desc'
      return q(sql, take)
    end

    if field_probe?(table, 'id')
      sql += ' order by id desc'
      return q(sql, take)
    end

    q(sql, take)
  end

  def transform_h(take, skip)
    types = @res.field_types
    fields = @res.fields

    @res.drop(skip).take(take).each do |ret|
      types.each_with_index do |type, index|
        ret[fields[index]] = JSON.parse(ret[fields[index]]) if type.eql?('json') && ret[fields[index]]

        if fields[index].match(/_at$/) && type.match(/^int/) && !ret[fields[index]].nil?
          ret[fields[index]] = ret[fields[index]].to_s + ' ' + Time.at(ret[fields[index]]).to_s
        end
      end
    end
  end

  def count(sql)
    query(sql).count
  end

  def fff(sql)
    ap query(sql, as: :array).first[0]
  end
end

db = nil
config_file = File.open '/etc/dbrepl_conf.json'
configs = JSON.load config_file
config_file.close

configs.each do |config|
  instance_variable_set("@#{config['name']}", Mysql2::Client.new(host: config['host'], username: config['username'], password: config['password'], database: config['database']))

  db = instance_variable_get("@#{config['name']}") if config['default']
end

db = instance_variable_get("@#{ARGV[0]}") unless ARGV.empty?

tables = db ? db.query("show tables", as: :array).to_a.flatten : []

if tables.any?
  Pry.config.command_completions = proc { tables }
  Pry.config.file_completions = proc { [] }
end

Pry::Commands.block_command "l", "list tables." do
  db.l
end

Pry::Commands.block_command "d", "show a table's structure." do |table|
  db.d table
end

Pry::Commands.block_command "s", "list a table, order by latest records if possible" do |table|
  db.s table
end

Pry::Commands.block_command "q", "run a sql query" do |*sql|
  db.q(sql.join(' '))
end

Pry::Commands.block_command "ff", "run a sql query and fetch first row" do |*sql|
  db.ff(sql.join(' '))
end

Pry::Commands.block_command "fff", "run a sql query and fetch first row's first field" do |*sql|
  db.fff(sql.join(' '))
end

Pry::Commands.block_command "m", "show more results." do |num|
  take = num && num.to_i > 0 ? num.to_i : 10
  db.m(take)
end

Pry::ColorPrinter.pp db.info if db

binding.pry
