#!/usr/bin/env ruby
# frozen_string_literal: true

require 'amazing_print'
require 'benchmark'
require 'colorize'
require 'date'
require 'ipaddr'
require 'json'
require 'mysql2'
require 'pry'
require 'text-table'

class Mysql2::Client
  attr_reader :res, :course, :exec_time, :total, :tables

  @changed

  def ff(sql)
    @res = query(sql)
    ap transform_h(0, 1)
  end

  def l(num_of_line = 4)
    sql = 'show tables'
    res = query(sql, as: :array)

    tbl = []
    res.each_slice(num_of_line) do |row|
      tbl.push(row.map { |a| a[0] })
    end

    if tbl.any?
      if tbl.last.length < num_of_line
        tbl.last.fill('',  tbl.last.length..(num_of_line - 1))
      end

      puts tbl.to_table
    end

    nil
  end

  def v(keyword = nil)
    if keyword.nil?
      sql = "SHOW VARIABLES"
    else
      sql = "SHOW VARIABLES LIKE '%#{keyword}%'"
    end
    show_in_table(sql)
  end

  def status(keyword = nil)
    if keyword.nil?
      sql = "SHOW GLOBAL STATUS"
    else
      sql = "SHOW GLOBAL STATUS LIKE '%#{keyword}%'"
    end
    show_in_table(sql)
  end

  def d(table)
    sql = "desc #{table}"
    show_in_table(sql)

    sql = "show indexes from #{table}"
    show_in_table(sql)
  end

  def show_in_table(sql)
    res = query(sql, as: :array)

    fields = res.fields
    res_a = res.to_a
    res_a.unshift(fields)

    puts res_a.to_table(first_row_is_head: true)
  end

  def q(sql, take = 10)
    @changed = sql[/^insert|update|delete/i] ? true : false

    @exec_time = Benchmark.measure do
      @res = query(sql)
      @coursor = 0
    end
    @total = @res ? @res.count : nil

    take = @total if @total && take > @total

    output(take)
    nil
  end

  def m(take = 10)
    return if @res.nil?
    return if @coursor >= @total

    output(take)
  end

  def output(take)
    ap transform_h(take, @coursor).to_a, {color:{hash: :cyanish, args: :red}} if @total

    if @total
      puts select_output_postfix(take)
      @coursor += take
    end

    puts changed_output_postfix if @changed

    nil
  end

  def select_output_postfix(take)
    total.to_s.colorize(color: :cyan, mode: :bold) \
      + ' row(s) total, from '.colorize(:green) \
      + @coursor.to_s.colorize(color: :blue, mode: :bold) \
      + ' show '.colorize(:green) \
      + take.to_s.colorize(color: :blue, mode: :bold) \
      + ' row(s) '.colorize(:green) \
      + '('.colorize(:green) \
      + @exec_time.real.to_s.colorize(:yellow) \
      + ' sec)'.colorize(:green)
  end

  def changed_output_postfix
    unless query_info_string.nil?
      numbers = query_info_string.scan(/\d+/)
      'Rows matched: '.colorize(:blue) + numbers[0].to_s.colorize(:green) \
        + '  Changed: '.colorize(:blue) + numbers[1].to_s.colorize(:yellow) \
        + '  Warnings: '.colorize(:blue) + numbers[2].to_s.colorize(:red)
    end
  end

  def field_probe?(table, field)
    (query "show columns from `#{table}` like '#{field}'").to_a.any?
  end

  def s(table, take = 10)
    sql = "select * from `#{table}`"

    if field_probe?(table, 'created_at')
      sql += ' order by created_at desc'
      return q(sql, take)
    end

    if field_probe?(table, 'id')
      sql += ' order by id desc'
      return q(sql, take)
    end

    q(sql, take)
  end

  def transform_h(take, skip)
    types = @res.field_types
    fields = @res.fields

    @res.drop(skip).take(take).each do |ret|
      types.each_with_index do |type, index|
        if type.eql?('json') && ret[fields[index]]
          ret[fields[index]] = JSON.parse(ret[fields[index]])
        end

        next unless fields[index].match(/_at$/) &&
                    type.match(/^int/) &&
                    !ret[fields[index]].nil?

        ret[fields[index]] = ret[fields[index]].to_s \
          + ' ' \
          + Time.at(ret[fields[index]]).to_s
      end
    end
  end

  def count(sql)
    query(sql).count
  end

  def fff(sql)
    ap query(sql, as: :array).first[0]
  end

  def get_tables
    @tables = query('show tables', as: :array).to_a.flatten
  end

  def ip_location(ipaddr)
    iptable = 'ip2location_db11'
    unless @tables.any?(iptable)
      puts "table #{iptable} not exist."
      return
    end

    ip = IPAddr.new ipaddr
    sql = "select * from ip2location_db11 where ip_to >=#{ip.to_i} AND ip_from <=#{ip.to_i}"
    q sql
  end
end

db = nil
config_file = File.open '/etc/dbrepl_conf.json'
configs = JSON.load config_file
config_file.close

configs.each do |config|
  port = config['port'] or 3306
  instance_variable_set(
    "@#{config['name']}",
    Mysql2::Client.new(
      host: config['host'],
      port: port,
      username: config['username'],
      password: config['password'],
      database: config['database']
    )
  )

  db = instance_variable_get("@#{config['name']}") if config['default']
end

db = instance_variable_get("@#{ARGV[0]}") unless ARGV.empty?

tables = db.get_tables

if tables.any?
  Pry.config.command_completions = proc { tables }
  Pry.config.file_completions = proc { [] }
end

Pry::Commands.block_command 'l', 'list tables.' do |num|
  num_of_line = num&.to_i&.positive? ? num.to_i : 4
  db.l(num_of_line)
end

Pry::Commands.block_command 'd', "show a table's structure." do |table|
  db.d table
end

Pry::Commands.block_command 'v', "show mysql variables." do |keyword|
  db.v keyword
end

Pry::Commands.block_command 'status', "show mysql server status variables." do |keyword|
  db.status keyword
end

Pry::Commands.block_command(
  's',
  'list a table, order by latest records if possible'
) do |table|
  db.s table
end

Pry::Commands.block_command 'q', 'run a sql query' do |*sql|
  db.q(sql.join(' '))
end

Pry::Commands.block_command(
  'ff',
  'run a sql query and fetch first row'
) do |*sql|
  db.ff(sql.join(' '))
end

Pry::Commands.block_command(
  'fff',
  "run a sql query and fetch first row's first field"
) do |*sql|
  db.fff(sql.join(' '))
end

Pry::Commands.block_command 'm', 'show more results.' do |num|
  take = num&.to_i&.positive? ? num.to_i : 10
  db.m(take)
end

Pry::Commands.block_command 'ip', "show ip addr's location." do |ip|
  db.ip_location ip
end

Pry::Commands.create_command 'ut' do
  description 'human time format unix timestamp convert: ut [-t time string] | [timestamp]'
  def setup
    @time_str = nil
  end

  def options(opt)
    opt.on :t, :time_str, 'a time string want convert to unixstamp.',
           argument: true, as: String
  end

  def process
    unless opts[:t].nil?
      puts Date.parse(opts[:t].to_s).to_time.to_i
      puts opts[:t]
    end

    unless args[0].nil?
      puts args[0]
      puts Time.at(args[0].to_i).to_s
    end

    puts Time.now.to_i
    puts Time.now.to_s
  end
end

Pry::ColorPrinter.pp db.info if db

Pry.config.dbname = db.query_options[:database]

Pry.start(
  binding,
  :prompt => Pry::Prompt.new(
    "custom",
    "my custom prompt",
    [proc { |main, nest_level, pry_instance, _| "\u001b[33;1m#{Pry.config.dbname}\u001b[0m:" + "#{pry_instance.input_ring.count}".colorize(:blue) + "> " }]
  )
)
